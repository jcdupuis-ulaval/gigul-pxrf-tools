# -*- coding: utf-8 -*-
"""
Created on Tue Aug 11 10:10:14 2020

@author: debth
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import gigul_pxrf_tools as gigul
import os


# File setup for data and results################################
fname ='TDCAEXD332886Z'
ddir = '../results/CSV/merged/'
rdir = '../results/'
idir = '../results/peaks/'

# load the data file 
flist = os.listdir(path=ddir)
print (flist)
flist_peaks = os.listdir(path=idir)
print (flist_peaks)
peakszero=np.zeros((2048,2))
i=0


for fname in flist_peaks:
    peaks= np.genfromtxt(idir+flist_peaks[i],delimiter=',')
    c,d= peaks.shape
    
for fname in flist:
    datas=np.genfromtxt(ddir+fname, delimiter=',')
    a,b= datas.shape
    data=datas[:,1:5]
    m,n = data.shape
    traces = data
    nsample,ntraces = traces.shape
    print ('Processing file : '+ddir+fname)
    data0=data[:,0]
    n=len(data)
    
for i in np.arange(n):
    while i <= 4:
        window=5
        means=gigul.rolmean(data,5)
        STD=gigul.rolstd(data,5)
        ax1 = plt.subplot2grid((2,1), (0,0))
        ax2 = plt.subplot2grid((2,1), (0,0), sharex=ax1)
        fig, ax1 = plt.subplots()
        ax2=ax1.twinx()
        ax1.plot(data, 'r-')
        ax1.plot(means, 'g:')
        ax1.plot(peaks[:,0],peaks[:,1],'+',color='k')
        ax2.plot(STD, 'b-')
        ax1.set_xlabel('bande KeV')
        ax1.set_ylabel('mobile mean count', color='g')
        ax2.set_ylabel('mobile standard deviation count', color='b')
        plt.grid()
        plt.show()
        np.savetxt(rdir+'CSV/mean_std/'+'mean_std-'+fname+'-paire-'+str(i)+'.csv',np.transpose([means,STD]),delimiter=',')
        peaks_round=np.round(peaks[:,0],decimals=0,out=None)
        peaks_final=pd.DataFrame({'peaks':peaks_round})
        peaks_means=pd.DataFrame({'peaks_means':means[peaks_round]})
        peaks_STD=pd.DataFrame({'peaks_STD':STD[peaks_round]})
        verif_alpha = [peaks_means, peaks_STD]
        headers = ["means","STD"]
        verif= pd.concat(verif_alpha, axis=1, keys=headers)
        print(verif)
        i = (i+1)
        if i <= 4:
            continue
    if i == 5:
        print ('stop')
        break
            

